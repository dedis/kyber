// Package vss implements the verifiable secret sharing scheme from the
// paper "Provably Secure Distributed Schnorr Signatures and a (t, n) Threshold
// Scheme for Implicit Certificates".
// VSS enables a dealer to share a secret securely and verifiably among n
// participants out of which at least t are required for its reconstruction.
// The verifiability of the process prevents a
// malicious dealer from influencing the outcome to his advantage as each
// verifier can check the validity of the received share. The protocol has the
// following steps:
//
//  1. The dealer send a Deal to every verifiers using `Deals()`. Each deal must
//     be sent securely to one verifier whose public key is at the same index than
//     the index of the Deal.
//
//  2. Each verifier processes the Deal with `ProcessDeal`.
//     This function returns a Response which can be twofold:
//     - an approval, to confirm a correct deal
//     - a complaint to announce an incorrect deal notifying others that the
//     dealer might be malicious.
//     All Responses must be broadcasted to every verifiers and the dealer.
//
//  3. The dealer can respond to each complaint by a justification revealing the
//     share he originally sent out to the accusing verifier. This is done by
//     calling `ProcessResponse` on the `Dealer`.
//
//  4. The verifiers refuse the shared secret and abort the protocol if there
//     are at least t complaints OR if a Justification is wrong. The verifiers
//     accept the shared secret if there are at least t approvals at which point
//     any t out of n verifiers can reveal their shares to reconstruct the shared
//     secret.
package vss

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"reflect"

	"go.dedis.ch/kyber/v4"
	"go.dedis.ch/kyber/v4/share"
	"go.dedis.ch/kyber/v4/sign/schnorr"
	"go.dedis.ch/protobuf"
)

// Suite defines the capabilities required by the vss package.
type Suite interface {
	kyber.Group
	kyber.HashFactory
	kyber.XOFFactory
	kyber.Random
}

// Dealer encapsulates for creating and distributing the shares and for
// replying to any Responses.
type Dealer struct {
	suite Suite

	// long is the longterm key of the Dealer
	long          kyber.Scalar
	pub           kyber.Point
	secret        kyber.Scalar
	secretCommits []kyber.Point
	verifiers     []kyber.Point
	hkdfContext   []byte
	// threshold of shares that is needed to reconstruct the secret
	t uint32
	// sessionID is a unique identifier for the whole session of the scheme
	sessionID []byte
	// list of deals this Dealer has generated
	deals []*Deal
	*aggregator
}

// Deal encapsulates the verifiable secret share and is sent by the dealer to a verifier.
type Deal struct {
	// Unique session identifier for this protocol run
	SessionID []byte
	// Private share generated by the dealer
	SecShare *share.PriShare
	// Random share generated by the dealer
	RndShare *share.PriShare
	// Threshold used for this secret sharing run
	T uint32
	// Commitments are the coefficients used to verify the shares against
	Commitments []kyber.Point
}

// EncryptedDeal contains the deal in a encrypted form only decipherable by the
// correct recipient. The encryption is performed in a similar manner as what is
// done in TLS. The dealer generates a temporary key pair, signs it with its
// longterm secret key.
type EncryptedDeal struct {
	// Ephemeral Diffie Hellman key
	DHKey kyber.Point
	// Signature of the DH key by the longterm key of the dealer
	Signature []byte
	// AEAD encryption of the deal marshalled by protobuf
	Cipher []byte
}

// Response is sent by the verifiers to all participants and holds each
// individual validation or refusal of a Deal.
type Response struct {
	// SessionID related to this run of the protocol
	SessionID []byte
	// Index of the verifier issuing this Response
	Index uint32
	// Approved is true if the Response is valid
	Approved bool
	// Signature over the whole packet
	Signature []byte
}

// Justification is a message that is broadcasted by the Dealer in response to
// a Complaint. It contains the original Complaint as well as the shares
// distributed to the complainer.
type Justification struct {
	// SessionID related to the current run of the protocol
	SessionID []byte
	// Index of the verifier who issued the Complaint,i.e. index of this Deal
	Index uint32
	// Deal in cleartext
	Deal *Deal
	// Signature over the whole packet
	Signature []byte
}

// NewDealer returns a Dealer capable of leading the secret sharing scheme. It
// does not have to be trusted by other Verifiers. The security parameter t is
// the number of shares required to reconstruct the secret. MinimumT() provides
// a middle ground between robustness and secrecy. Increasing t will increase
// the secrecy at the cost of the decreased robustness and vice versa. It
// returns an error if the t is inferior or equal to 2.
func NewDealer(suite Suite, longterm, secret kyber.Scalar, verifiers []kyber.Point, t uint32) (*Dealer, error) {
	d := &Dealer{
		suite:     suite,
		long:      longterm,
		secret:    secret,
		verifiers: verifiers,
	}
	if !validT(t, verifiers) {
		return nil, fmt.Errorf("dealer: t %d invalid", t)
	}
	d.t = t

	H := deriveH(d.suite, d.verifiers)
	f := share.NewPriPoly(d.suite, d.t, d.secret, suite.RandomStream())
	g := share.NewPriPoly(d.suite, d.t, nil, suite.RandomStream())
	d.pub = d.suite.Point().Mul(d.long, nil)

	// Compute public polynomial coefficients
	F := f.Commit(d.suite.Point().Base())
	_, d.secretCommits = F.Info()
	G := g.Commit(H)

	C, err := F.Add(G)
	if err != nil {
		return nil, err
	}
	_, commitments := C.Info()

	d.sessionID, err = sessionID(d.suite, d.pub, d.verifiers, commitments, d.t)
	if err != nil {
		return nil, err
	}

	d.aggregator = newAggregator(d.suite, d.pub, d.verifiers, commitments, d.t, d.sessionID)
	// C = F + G
	d.deals = make([]*Deal, len(d.verifiers))
	for i := range d.verifiers {
		idx := uint32(i)
		fi := f.Eval(idx)
		gi := g.Eval(idx)
		d.deals[i] = &Deal{
			SessionID:   d.sessionID,
			SecShare:    fi,
			RndShare:    gi,
			Commitments: commitments,
			T:           d.t,
		}
	}
	d.hkdfContext, err = context(suite, d.pub, verifiers)
	return d, err
}

// PlaintextDeal returns the plaintext version of the deal destined for peer i.
// Use this only for testing.
func (d *Dealer) PlaintextDeal(i int) (*Deal, error) {
	if i >= len(d.deals) {
		return nil, errors.New("dealer: PlaintextDeal given wrong index")
	}
	return d.deals[i], nil
}

// EncryptedDeal returns the encryption of the deal that must be given to the
// verifier at index i.
// The dealer first generates a temporary Diffie Hellman key, signs it using its
// longterm key, and computes the shared key depending on its longterm and
// ephemeral key and the verifier's public key.
// This shared key is then fed into a HKDF whose output is the key to a AEAD
// (AES256-GCM) scheme to encrypt the deal.
func (d *Dealer) EncryptedDeal(i int) (*EncryptedDeal, error) {
	vPub, ok := findPub(d.verifiers, uint32(i))
	if !ok {
		return nil, errors.New("dealer: wrong index to generate encrypted deal")
	}
	// generate an ephemeral key
	dhSecret := d.suite.Scalar().Pick(d.suite.RandomStream())
	dhPublic := d.suite.Point().Mul(dhSecret, nil)
	// signs the public key
	dhPublicBuff, _ := dhPublic.MarshalBinary()
	signature, err := schnorr.Sign(d.suite, d.long, dhPublicBuff)
	if err != nil {
		return nil, err
	}
	// AES128-GCM
	pre := dhExchange(d.suite, dhSecret, vPub)
	gcm, err := newAEAD(d.suite.Hash, pre, d.hkdfContext)
	if err != nil {
		return nil, err
	}

	nonce := make([]byte, gcm.NonceSize())
	dealBuff, err := protobuf.Encode(d.deals[i])
	if err != nil {
		return nil, err
	}
	encrypted := gcm.Seal(nil, nonce, dealBuff, d.hkdfContext)
	return &EncryptedDeal{
		DHKey:     dhPublic,
		Signature: signature,
		Cipher:    encrypted,
	}, nil
}

// EncryptedDeals calls `EncryptedDeal` for each index of the verifier and
// returns the list of encrypted deals. Each index in the returned slice
// corresponds to the index in the list of verifiers.
func (d *Dealer) EncryptedDeals() ([]*EncryptedDeal, error) {
	deals := make([]*EncryptedDeal, len(d.verifiers))
	var err error
	for i := range d.verifiers {
		deals[i], err = d.EncryptedDeal(i)
		if err != nil {
			return nil, err
		}
	}
	return deals, nil
}

// ProcessResponse analyzes the given Response. If it's a valid complaint, then
// it returns a Justification. This Justification must be broadcasted to every
// participants. If it's an invalid complaint, it returns an error about the
// complaint. The verifiers will also ignore an invalid Complaint.
func (d *Dealer) ProcessResponse(r *Response) (*Justification, error) {
	if err := d.verifyResponse(r); err != nil {
		return nil, err
	}
	if r.Approved {
		return nil, nil //nolint:nilnil // Expected behavior
	}

	j := &Justification{
		SessionID: d.sessionID,
		// index is guaranteed to be good because of d.verifyResponse before
		Index: r.Index,
		Deal:  d.deals[r.Index],
	}
	sig, err := schnorr.Sign(d.suite, d.long, j.Hash(d.suite))
	if err != nil {
		return nil, err
	}
	j.Signature = sig
	return j, nil
}

// SecretCommit returns the commitment of the secret being shared by this
// dealer. This function is only to be called once the deal has enough approvals
// and is verified otherwise it returns nil.
func (d *Dealer) SecretCommit() kyber.Point {
	if !d.EnoughApprovals() || !d.DealCertified() {
		return nil
	}
	return d.suite.Point().Mul(d.secret, nil)
}

// Commits returns the commitments of the coefficient of the secret polynomial
// the Dealer is sharing.
func (d *Dealer) Commits() []kyber.Point {
	if !d.EnoughApprovals() || !d.DealCertified() {
		return nil
	}
	return d.secretCommits
}

// Key returns the longterm key pair used by this Dealer.
func (d *Dealer) Key() (secret kyber.Scalar, public kyber.Point) {
	return d.long, d.pub
}

// SessionID returns the current sessionID generated by this dealer for this
// protocol run.
func (d *Dealer) SessionID() []byte {
	return d.sessionID
}

// SetTimeout tells this dealer to consider this moment the maximum time limit.
// it calls cleanVerifiers which will take care of all Verifiers who have not
// responded until now.
func (d *Dealer) SetTimeout() {
	d.aggregator.cleanVerifiers()
}

// Verifier receives a Deal from a Dealer, can reply with a Complaint, and can
// collaborate with other Verifiers to reconstruct a secret.
type Verifier struct {
	suite       Suite
	longterm    kyber.Scalar
	pub         kyber.Point
	dealer      kyber.Point
	index       uint32
	verifiers   []kyber.Point
	hkdfContext []byte
	*aggregator
}

// NewVerifier returns a Verifier out of:
// - its longterm secret key
// - the longterm dealer public key
// - the list of public key of verifiers. The list MUST include the public key
// of this Verifier also.
// The security parameter t of the secret sharing scheme is automatically set to
// a default safe value. If a different t value is required, it is possible to set
// it with `verifier.SetT()`.
func NewVerifier(suite Suite, longterm kyber.Scalar, dealerKey kyber.Point,
	verifiers []kyber.Point) (*Verifier, error) {

	pub := suite.Point().Mul(longterm, nil)
	var ok bool
	var index uint32
	for i, v := range verifiers {
		if v.Equal(pub) {
			ok = true
			index = uint32(i)
			break
		}
	}
	if !ok {
		return nil, errors.New("vss: public key not found in the list of verifiers")
	}
	hkdfContext, err := context(suite, dealerKey, verifiers)
	if err != nil {
		return nil, err
	}
	v := &Verifier{
		suite:       suite,
		longterm:    longterm,
		dealer:      dealerKey,
		verifiers:   verifiers,
		pub:         pub,
		index:       index,
		hkdfContext: hkdfContext,
	}

	return v, nil
}

// ProcessEncryptedDeal decrypt the deal received from the Dealer.
// If the deal is valid, i.e. the verifier can verify its shares
// against the public coefficients and the signature is valid, an approval
// response is returned and must be broadcasted to every participants
// including the dealer.
// If the deal itself is invalid, it returns a complaint response that must be
// broadcasted to every other participants including the dealer.
// If the deal has already been received, or the signature generation of the
// response failed, it returns an error without any responses.
func (v *Verifier) ProcessEncryptedDeal(e *EncryptedDeal) (*Response, error) {
	d, err := v.decryptDeal(e)
	if err != nil {
		return nil, err
	}
	if d.SecShare.I != v.index {
		return nil, errors.New("vss: verifier got wrong index from deal")
	}

	sid, err := sessionID(v.suite, v.dealer, v.verifiers, d.Commitments, d.T)
	if err != nil {
		return nil, err
	}

	if v.aggregator == nil {
		v.aggregator = newAggregator(v.suite, v.dealer, v.verifiers, d.Commitments, d.T, d.SessionID)
	}

	r := &Response{
		SessionID: sid,
		Index:     v.index,
		Approved:  true,
	}
	if err = v.VerifyDeal(d, true); err != nil {
		r.Approved = false
	}

	if errors.Is(err, errDealAlreadyProcessed) {
		return nil, err
	}

	if r.Signature, err = schnorr.Sign(v.suite, v.longterm, r.Hash(v.suite)); err != nil {
		return nil, err
	}

	if err = v.aggregator.addResponse(r); err != nil {
		return nil, err
	}
	return r, nil
}

func (v *Verifier) decryptDeal(e *EncryptedDeal) (*Deal, error) {
	ephBuff, err := e.DHKey.MarshalBinary()
	if err != nil {
		return nil, err
	}
	// verify signature
	if err := schnorr.Verify(v.suite, v.dealer, ephBuff, e.Signature); err != nil {
		return nil, err
	}

	// compute shared key and AES526-GCM cipher
	pre := dhExchange(v.suite, v.longterm, e.DHKey)
	gcm, err := newAEAD(v.suite.Hash, pre, v.hkdfContext)
	if err != nil {
		return nil, err
	}
	nonce := make([]byte, gcm.NonceSize())
	decrypted, err := gcm.Open(nil, nonce, e.Cipher, v.hkdfContext)
	if err != nil {
		return nil, err
	}
	deal := &Deal{}
	err = deal.decode(v.suite, decrypted)
	return deal, err
}

// ProcessResponse analyzes the given response. If it's a valid complaint, the
// verifier should expect to see a Justification from the Dealer. It returns an
// error if it's not a valid response.
// Call `v.DealCertified()` to check if the whole protocol is finished.
func (v *Verifier) ProcessResponse(resp *Response) error {
	return v.aggregator.verifyResponse(resp)
}

// Deal returns the Deal that this verifier has received. It returns
// nil if the deal is not certified or there is not enough approvals.
func (v *Verifier) Deal() *Deal {
	if !v.EnoughApprovals() || !v.DealCertified() {
		return nil
	}
	return v.deal
}

// ProcessJustification takes a DealerResponse and returns an error if
// something went wrong during the verification. If it is the case, that
// probably means the Dealer is acting maliciously. In order to be sure, call
// `v.EnoughApprovals()` and if true, `v.DealCertified()`.
func (v *Verifier) ProcessJustification(dr *Justification) error {
	return v.aggregator.verifyJustification(dr)
}

// Key returns the longterm key pair this verifier is using during this protocol
// run.
func (v *Verifier) Key() (kyber.Scalar, kyber.Point) {
	return v.longterm, v.pub
}

// Index returns the index of the verifier in the list of participants used
// during this run of the protocol.
func (v *Verifier) Index() uint32 {
	return v.index
}

// SessionID returns the session id generated by the Dealer. WARNING: it returns
// an nil slice if the verifier has not received the Deal yet !
func (v *Verifier) SessionID() []byte {
	return v.sid
}

// RecoverSecret recovers the secret shared by a Dealer by gathering at least t
// Deals from the verifiers. It returns an error if there is not enough Deals or
// if all Deals don't have the same SessionID.
func RecoverSecret(suite Suite, deals []*Deal, n, t uint32) (kyber.Scalar, error) {
	shares := make([]*share.PriShare, len(deals))
	for i, deal := range deals {
		// all sids the same
		if bytes.Equal(deal.SessionID, deals[0].SessionID) {
			shares[i] = deal.SecShare
		} else {
			return nil, errors.New("vss: all deals need to have same session id")
		}
	}
	return share.RecoverSecret(suite, shares, t, n)
}

// SetTimeout tells this verifier to consider this moment the maximum time limit.
// it calls cleanVerifiers which will take care of all Verifiers who have not
// responded until now.
func (v *Verifier) SetTimeout() {
	v.aggregator.cleanVerifiers()
}

// aggregator is used to collect all deals, and responses for one protocol run.
// It brings common functionalities for both Dealer and Verifier structs.
type aggregator struct {
	suite     Suite
	dealer    kyber.Point
	verifiers []kyber.Point
	commits   []kyber.Point

	responses map[uint32]*Response
	sid       []byte
	deal      *Deal
	t         uint32
	badDealer bool
}

func newAggregator(
	suite Suite,
	dealer kyber.Point,
	verifiers,
	commitments []kyber.Point,
	t uint32,
	sid []byte,
) *aggregator {
	agg := &aggregator{
		suite:     suite,
		dealer:    dealer,
		verifiers: verifiers,
		commits:   commitments,
		t:         t,
		sid:       sid,
		responses: make(map[uint32]*Response),
	}
	return agg
}

var errDealAlreadyProcessed = errors.New("vss: verifier already received a deal")

// VerifyDeal analyzes the deal and returns an error if it's incorrect. If
// inclusion is true, it also returns an error if it the second time this struct
// analyzes a Deal.
func (a *aggregator) VerifyDeal(d *Deal, inclusion bool) error {
	if a.deal != nil && inclusion {
		return errDealAlreadyProcessed

	}
	if a.deal == nil {
		a.commits = d.Commitments
		a.sid = d.SessionID
		a.deal = d
	}

	if !validT(d.T, a.verifiers) {
		return errors.New("vss: invalid t received in Deal")
	}

	if !bytes.Equal(a.sid, d.SessionID) {
		return errors.New("vss: find different sessionIDs from Deal")
	}

	fi := d.SecShare
	gi := d.RndShare
	if fi.I != gi.I {
		return errors.New("vss: not the same index for f and g share in Deal")
	}
	if fi.I >= uint32(len(a.verifiers)) {
		return errors.New("vss: index out of bounds in Deal")
	}
	// compute fi * G + gi * H
	fig := a.suite.Point().Base().Mul(fi.V, nil)
	H := deriveH(a.suite, a.verifiers)
	gih := a.suite.Point().Mul(gi.V, H)
	ci := a.suite.Point().Add(fig, gih)

	commitPoly := share.NewPubPoly(a.suite, nil, d.Commitments)

	pubShare := commitPoly.Eval(fi.I)
	if !ci.Equal(pubShare.V) {
		return errors.New("vss: share does not verify against commitments in Deal")
	}
	return nil
}

// cleanVerifiers checks the aggregator's response array and creates a StatusComplaint
// response for all verifiers who have no response in the array.
func (a *aggregator) cleanVerifiers() {
	for i := range a.verifiers {
		if _, ok := a.responses[uint32(i)]; !ok {
			a.responses[uint32(i)] = &Response{
				SessionID: a.sid,
				Index:     uint32(i),
				Approved:  false,
			}
		}
	}
}

func (a *aggregator) verifyResponse(r *Response) error {
	if !bytes.Equal(r.SessionID, a.sid) {
		return errors.New("vss: receiving inconsistent sessionID in response")
	}

	pub, ok := findPub(a.verifiers, r.Index)
	if !ok {
		return errors.New("vss: index out of bounds in response")
	}

	if err := schnorr.Verify(a.suite, pub, r.Hash(a.suite), r.Signature); err != nil {
		return err
	}

	return a.addResponse(r)
}

func (a *aggregator) verifyJustification(j *Justification) error {
	if _, ok := findPub(a.verifiers, j.Index); !ok {
		return errors.New("vss: index out of bounds in justification")
	}
	r, ok := a.responses[j.Index]
	if !ok {
		return errors.New("vss: no complaints received for this justification")
	}
	if r.Approved {
		return errors.New("vss: justification received for an approval")
	}

	if err := a.VerifyDeal(j.Deal, false); err != nil {
		// if one response is bad, flag the dealer as malicious
		a.badDealer = true
		return err
	}
	r.Approved = true
	return nil
}

func (a *aggregator) addResponse(r *Response) error {
	if _, ok := findPub(a.verifiers, r.Index); !ok {
		return errors.New("vss: index out of bounds in Complaint")
	}
	if _, ok := a.responses[r.Index]; ok {
		return errors.New("vss: already existing response from same origin")
	}
	a.responses[r.Index] = r
	return nil
}

// EnoughApprovals returns true if enough verifiers have sent their approval for
// the deal they received.
func (a *aggregator) EnoughApprovals() bool {
	var app uint32 = 0
	for _, r := range a.responses {
		if r.Approved {
			app++
		}
	}
	return app >= a.t
}

// DealCertified returns true if there has been less than t complaints, all
// Justifications were correct and if EnoughApprovals() returns true.
func (a *aggregator) DealCertified() bool {
	// a can be nil if we're calling it before receiving a deal
	if a == nil {
		return false
	}

	var verifiersUnstable int
	// Check either a StatusApproval or StatusComplaint for all known verifiers
	// i.e. make sure all verifiers are either timed-out or OK.
	for i := range a.verifiers {
		if _, ok := a.responses[uint32(i)]; !ok {
			verifiersUnstable++
		}
	}

	tooMuchComplaints := verifiersUnstable > 0 || a.badDealer
	return a.EnoughApprovals() && !tooMuchComplaints
}

// UnsafeSetResponseDKG is an UNSAFE bypass method to allow DKG to use VSS
// that works on basis of approval only.
func (a *aggregator) UnsafeSetResponseDKG(idx uint32, approval bool) {
	r := &Response{
		SessionID: a.sid,
		Index:     idx,
		Approved:  approval,
	}

	//nolint:errcheck // Unsafe function
	a.addResponse(r)
}

// MinimumT returns a safe value of T that balances secrecy and robustness.
// It expects n, the total number of participants.
// T should be adjusted to your threat model. Setting a lower T decreases the
// difficulty for an adversary to break secrecy. However, a too large T makes
// it possible for an adversary to prevent recovery (robustness).
func MinimumT(n uint32) uint32 {
	return (n >> 1) + 1
}

func validT(t uint32, verifiers []kyber.Point) bool {
	return t >= 2 && t <= uint32(len(verifiers))
}

func deriveH(suite Suite, verifiers []kyber.Point) kyber.Point {
	var b bytes.Buffer
	for _, v := range verifiers {
		_, _ = v.MarshalTo(&b)
	}
	base := suite.Point().Pick(suite.XOF(b.Bytes()))
	return base
}

func findPub(verifiers []kyber.Point, idx uint32) (kyber.Point, bool) {
	iidx := int(idx)
	if iidx >= len(verifiers) {
		return nil, false
	}
	return verifiers[iidx], true
}

func sessionID(suite Suite, dealer kyber.Point, verifiers, commitments []kyber.Point, t uint32) ([]byte, error) {
	h := suite.Hash()
	_, err := dealer.MarshalTo(h)
	if err != nil {
		return nil, err
	}

	for _, v := range verifiers {
		_, err = v.MarshalTo(h)
		if err != nil {
			return nil, err
		}
	}

	for _, c := range commitments {
		_, err = c.MarshalTo(h)
		if err != nil {
			return nil, err
		}
	}

	err = binary.Write(h, binary.LittleEndian, t)
	return h.Sum(nil), err
}

// Hash returns the Hash representation of the Response
func (r *Response) Hash(s Suite) []byte {
	h := s.Hash()
	_, _ = h.Write([]byte("response"))
	_, _ = h.Write(r.SessionID)
	_ = binary.Write(h, binary.LittleEndian, r.Index)
	_ = binary.Write(h, binary.LittleEndian, r.Approved)
	return h.Sum(nil)
}

func (d *Deal) decode(s Suite, buff []byte) error {
	constructors := make(protobuf.Constructors)
	var point kyber.Point
	var secret kyber.Scalar
	constructors[reflect.TypeOf(&point).Elem()] = func() interface{} { return s.Point() }
	constructors[reflect.TypeOf(&secret).Elem()] = func() interface{} { return s.Scalar() }
	return protobuf.DecodeWithConstructors(buff, d, constructors)
}

// Hash returns the hash of a Justification.
func (j *Justification) Hash(s Suite) []byte {
	h := s.Hash()
	_, _ = h.Write([]byte("justification"))
	_, _ = h.Write(j.SessionID)
	_ = binary.Write(h, binary.LittleEndian, j.Index)
	buff, _ := protobuf.Encode(j.Deal)
	_, _ = h.Write(buff)
	return h.Sum(nil)
}
